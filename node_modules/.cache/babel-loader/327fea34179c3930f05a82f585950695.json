{"ast":null,"code":"const FIREBASE_DOMAIN = 'https://himanshu-91404.firebaseio.com/';\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    if (data.length > 0) {\n      const quoteObj = {\n        id: key,\n        ...data[key]\n      };\n    } else {\n      const quoteObj = {};\n    }\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data\n  };\n  return loadedQuote;\n}\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return {\n    commentId: data.name\n  };\n}\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}","map":{"version":3,"sources":["/home/dhiman_g/Documents/09-time-to-practice-starting-code/src/lib/api.js"],"names":["FIREBASE_DOMAIN","getAllQuotes","response","fetch","data","json","ok","Error","message","transformedQuotes","key","length","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","requestData","commentData","commentId","name","getAllComments","transformedComments","commentObj"],"mappings":"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","sourcesContent":["const FIREBASE_DOMAIN = 'https://himanshu-91404.firebaseio.com/';\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    if (data.length > 0) {\n      const quoteObj = {\n        id: key,\n        ...data[key],\n      };\n    } else {\n      const quoteObj = {}\n    }\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n"]},"metadata":{},"sourceType":"module"}